---
- ansible.builtin.file:
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    mode: '0750'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    path: /etc/nomad.d/certs
    state: directory
  name: Setup Nomad certificates folder permissions

- ansible.builtin.stat:
    path: "{{ certificate_files.ca_certificate }}"
  delegate_to: "{{ first_manager }}"
  name: Check for CA certificate
  register: ca_certificate

- ansible.builtin.stat:
    path: "{{ certificate_files.ca_private_key }}"
  delegate_to: "{{ first_manager }}"
  name: Check for CA private key
  register: ca_private_key

- community.crypto.x509_certificate_info:
    path: "{{ certificate_files.ca_certificate }}"
    valid_at:
      month: +1m
  name: Get CA certificate data
  register: ca_certificate_data
  when: ca_certificate.stat.exists

- ansible.builtin.file:
    path: "{{ certificate_files.ca_private_key }}"
    state: absent
  name: Remove Nomad CA private key if certificate expires soon
  when:
    - ca_private_key.stat.exists
    - not ca_certificate_data.valid_at.month

- ansible.builtin.file:
    path: "{{ certificate_files.ca_certificate }}"
    state: absent
  name: Remove Nomad CA certificate if expires soon
  when:
    - ca_certificate.stat.exists
    - not ca_certificate_data.valid_at.month

- ansible.builtin.command:
    cmd: >
      nomad tls ca create
        -common-name "{{ certificate.common_name }}"
        -country "{{ certificate.country }}"
        -days {{ certificate.days }}
        -domain {{ certificate.domain_name }}
        -locality "{{ certificate.locality }}"
        -name-constraint
        -organization "{{ certificate.organization }}"
        -organizational-unit "{{ certificate.organizational_unit }}"
        -postal-code "{{ certificate.postal_code }}"
        -province "{{ certificate.province }}"
        -street-address "{{ certificate.street_address }}"
  args:
    chdir: /etc/nomad.d/certs
  delegate_to: "{{ first_manager }}"
  name: Generate Nomad CA's private key and certificate
  when: >
    not ca_certificate.stat.exists
    or not ca_private_key.stat.exists
    or not ca_certificate_data.valid_at.month

- ansible.builtin.fetch:
    dest: "{{ certificate_files.local_ca_certificate }}"
    flat: true
    src: "{{ certificate_files.ca_certificate }}"
  delegate_to: "{{ first_manager }}"
  name: Copy Nomad CA's certificate to cache

- ansible.builtin.fetch:
    dest: "{{ certificate_files.local_ca_private_key }}"
    flat: true
    src: "{{ certificate_files.ca_private_key }}"
  delegate_to: "{{ first_manager }}"
  name: Copy Nomad CA's private key to cache

- ansible.builtin.copy:
    dest: "{{ certificate_files.ca_certificate }}"
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    mode: '0750'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    src: "{{ certificate_files.local_ca_certificate }}"
  name: Copy Nomad CA's certificate from cache

- ansible.builtin.copy:
    dest: "{{ certificate_files.ca_private_key }}"
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    mode: '0750'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    src: "{{ certificate_files.local_ca_private_key }}"
  name: Copy Nomad CA's private key from cache
  when: "'manager' in group_names"
...
