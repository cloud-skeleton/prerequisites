---
- ansible.builtin.set_fact:
    certificate_request:
      common_name: "{{ certificate.common_name | default('Cloud Skeleton CA', true) }}"
      country: "{{ certificate.country | default('EU', true) }}"
      days: "{{ certificate.days | default(365, true) }}"
      domain_name: "{{ certificate.domain_name | default(first_manager.split('.')[1:] | join('.'), true) }}"
      locality: "{{ certificate.locality | default('Brussels', true) }}"
      organization: "{{ certificate.organization | default('Cloud Skeleton', true) }}"
      organizational_unit: "{{ certificate.organizational_unit | default('Nomad Cluster', true) }}"
      postal_code: "{{ certificate.postal_code | default(1049, true) }}"
      province: "{{ certificate.province | default('Brussels', true) }}"
      street_address: "{{ certificate.street_address | default('Rue de la Loi 200', true) }}"
  name: Set certificate request information

- ansible.builtin.set_fact:
    certificate_files:
      ca_certificate: "/etc/nomad.d/certs/{{ certificate_request.domain_name }}-agent-ca.pem"
      ca_certificate_local: "{{ playbook_dir }}/../.cache/{{ certificate_request.domain_name }}-agent-ca.pem"
      ca_private_key: "/etc/nomad.d/certs/{{ certificate_request.domain_name }}-agent-ca-key.pem"
      ca_private_key_local: "{{ playbook_dir }}/../.cache/{{ certificate_request.domain_name }}-agent-ca-key.pem"
      cli_certificate: "/etc/nomad.d/certs/global-cli-{{ certificate_request.domain_name }}.pem"
      cli_certificate_local: "{{ playbook_dir }}/../.cache/global-cli-{{ certificate_request.domain_name }}.pem"
      cli_private_key: "/etc/nomad.d/certs/global-cli-{{ certificate_request.domain_name }}-key.pem"
      cli_private_key_local: "{{ playbook_dir }}/../.cache/global-cli-{{ certificate_request.domain_name }}-key.pem"
      client_certificate: "/etc/nomad.d/certs/global-client-{{ certificate_request.domain_name }}.pem"
      client_certificate_local: "{{ playbook_dir }}/../.cache/global-client-{{ certificate_request.domain_name }}.pem"
      client_private_key: "/etc/nomad.d/certs/global-client-{{ certificate_request.domain_name }}-key.pem"
      client_private_key_local: "{{ playbook_dir }}/../.cache/global-client-{{ certificate_request.domain_name }}-key.pem"
      server_certificate: "/etc/nomad.d/certs/global-server-{{ certificate_request.domain_name }}.pem"
      server_certificate_local: "{{ playbook_dir }}/../.cache/global-server-{{ certificate_request.domain_name }}.pem"
      server_private_key: "/etc/nomad.d/certs/global-server-{{ certificate_request.domain_name }}-key.pem"
      server_private_key_local: "{{ playbook_dir }}/../.cache/global-server-{{ certificate_request.domain_name }}-key.pem"
  name: Set certificate file paths

- ansible.builtin.file:
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    mode: '0750'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    path: /etc/nomad.d/certs
    state: directory
  name: Setup Nomad certificates folder permissions

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CA certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.ca_certificate }}"
        private_key: "{{ certificate_files.ca_private_key }}"

  - ansible.builtin.command:
      cmd: >
        nomad tls ca create
          -common-name "{{ certificate_request.common_name }}"
          -country "{{ certificate_request.country }}"
          -days {{ certificate_request.days }}
          -domain {{ certificate_request.domain_name }}
          -locality "{{ certificate_request.locality }}"
          -name-constraint
          -organization "{{ certificate_request.organization }}"
          -organizational-unit "{{ certificate_request.organizational_unit }}"
          -postal-code "{{ certificate_request.postal_code }}"
          -province "{{ certificate_request.province }}"
          -street-address "{{ certificate_request.street_address }}"
    args:
      chdir: /etc/nomad.d/certs
    name: Generate Nomad CA's private key and certificate
    register: ca_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize CA certificates
    vars:
      certificate:
        destinations: true
        path: "{{ certificate_files.ca_certificate }}"
        path_local: "{{ certificate_files.ca_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.ca_private_key }}"
        path_local: "{{ certificate_files.ca_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].ca_certificate_creation.changed
  name: CA certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up server certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.server_certificate }}"
        private_key: "{{ certificate_files.server_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        nomad tls cert create
          {{ '-additional-ipaddress ' ~ (all_manager_ips | join(' -additional-ipaddress ')) }}
          -domain {{ certificate_request.domain_name }}
          -region global
          -server
    args:
      chdir: /etc/nomad.d/certs
    name: Generate Nomad server private key and certificate
    register: server_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize server certificates
    vars:
      certificate:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.server_certificate }}"
        path_local: "{{ certificate_files.server_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.server_private_key }}"
        path_local: "{{ certificate_files.server_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].server_certificate_creation.changed
  name: Server certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up client certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.client_certificate }}"
        private_key: "{{ certificate_files.client_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        nomad tls cert create
          {{ '-additional-ipaddress ' ~ (all_worker_ips | join(' -additional-ipaddress ')) }}
          -client
          -domain {{ certificate_request.domain_name }}
    args:
      chdir: /etc/nomad.d/certs
    name: Generate Nomad client private key and certificate
    register: client_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize client certificates
    vars:
      certificate:
        destinations: true
        path: "{{ certificate_files.client_certificate }}"
        path_local: "{{ certificate_files.client_certificate_local }}"
      private_key:
        destinations: true
        path: "{{ certificate_files.client_private_key }}"
        path_local: "{{ certificate_files.client_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].client_certificate_creation.changed
  name: Client certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CLI certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.cli_certificate }}"
        private_key: "{{ certificate_files.cli_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        nomad tls cert create
          {{ '-additional-ipaddress ' ~ (all_worker_ips | join(' -additional-ipaddress ')) }}
          -cli
          -domain {{ certificate_request.domain_name }}
    args:
      chdir: /etc/nomad.d/certs
    name: Generate Nomad CLI private key and certificate
    register: cli_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize CLI certificates
    vars:
      certificate:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.cli_certificate }}"
        path_local: "{{ certificate_files.cli_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.cli_private_key }}"
        path_local: "{{ certificate_files.cli_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].cli_certificate_creation.changed
  name: CLI certificate

- ansible.builtin.set_fact:
    certificates_updated: >
      hostvars[first_manager].ca_certificate_creation.changed
      or hostvars[first_manager].server_certificate_creation.changed
      or hostvars[first_manager].client_certificate_creation.changed
      or hostvars[first_manager].cli_certificate_creation.changed
  name: Set certificates update fact
...
