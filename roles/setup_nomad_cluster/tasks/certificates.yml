---
- ansible.builtin.file:
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    mode: '0750'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    path: /etc/nomad.d/certs
    state: directory
  name: Setup Nomad certificates folder permissions

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CA certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.ca_certificate }}"
        private_key: "{{ certificate_files.ca_private_key }}"
    when: inventory_hostname == first_manager

#     - ansible.builtin.command:
#         cmd: >
#           nomad tls ca create
#             -common-name "{{ certificate.common_name }}"
#             -country "{{ certificate.country }}"
#             -days {{ certificate.days }}
#             -domain {{ certificate.domain_name }}
#             -locality "{{ certificate.locality }}"
#             -name-constraint
#             -organization "{{ certificate.organization }}"
#             -organizational-unit "{{ certificate.organizational_unit }}"
#             -postal-code "{{ certificate.postal_code }}"
#             -province "{{ certificate.province }}"
#             -street-address "{{ certificate.street_address }}"
#       args:
#         chdir: /etc/nomad.d/certs
#       delegate_to: "{{ first_manager }}"
#       name: Generate Nomad CA's private key and certificate
#       register: ca_certificate_gen
#       when: >
#         not ca_certificate.stat.exists
#         or not ca_private_key.stat.exists
#         or not ca_certificate_data.valid_at.month

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.ca_certificate_local }}"
#         flat: true
#         src: "{{ certificate_files.ca_certificate }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad CA's certificate to cache

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.ca_private_key_local }}"
#         flat: true
#         src: "{{ certificate_files.ca_private_key }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad CA's private key to cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.ca_certificate }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.ca_certificate_local }}"
#       name: Copy Nomad CA's certificate from cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.ca_private_key }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.ca_private_key_local }}"
#       name: Copy Nomad CA's private key from cache
#       when: "'manager' in group_names"
  name: CA certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up server certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.server_certificate }}"
        private_key: "{{ certificate_files.server_private_key }}"
    when: inventory_hostname == first_manager

#     - ansible.builtin.command:
#         cmd: >
#           nomad tls cert create
#             {{ '-additional-ipaddress ' ~ (manager_ips | join(' -additional-ipaddress ')) }}
#             -domain {{ certificate.domain_name }}
#             -region global
#             -server
#       args:
#         chdir: /etc/nomad.d/certs
#       delegate_to: "{{ first_manager }}"
#       name: Generate Nomad server private key and certificate
#       when: >
#         not server_certificate.stat.exists
#         or not server_private_key.stat.exists
#         or not server_certificate_data.valid_at.month
#         or ca_certificate_gen.changed

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.server_certificate_local }}"
#         flat: true
#         src: "{{ certificate_files.server_certificate }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad server's certificate to cache

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.server_private_key_local }}"
#         flat: true
#         src: "{{ certificate_files.server_private_key }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad server's private key to cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.server_certificate }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.server_certificate_local }}"
#       name: Copy Nomad server's certificate from cache
#       when: "'manager' in group_names"

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.server_private_key }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.server_private_key_local }}"
#       name: Copy Nomad server's private key from cache
#       when: "'manager' in group_names"
  name: Server certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up client certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.client_certificate }}"
        private_key: "{{ certificate_files.client_private_key }}"
    when: inventory_hostname == first_manager

#     - ansible.builtin.command:
#         cmd: >
#           nomad tls cert create
#             {{ '-additional-ipaddress ' ~ (worker_ips | join(' -additional-ipaddress ')) }}
#             -client
#             -domain {{ certificate.domain_name }}
#       args:
#         chdir: /etc/nomad.d/certs
#       delegate_to: "{{ first_manager }}"
#       name: Generate Nomad client private key and certificate
#       when: >
#         not client_certificate.stat.exists
#         or not client_private_key.stat.exists
#         or not client_certificate_data.valid_at.month
#         or ca_certificate_gen.changed

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.client_certificate_local }}"
#         flat: true
#         src: "{{ certificate_files.client_certificate }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad client's certificate to cache

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.client_private_key_local }}"
#         flat: true
#         src: "{{ certificate_files.client_private_key }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad client's private key to cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.client_certificate }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.client_certificate_local }}"
#       name: Copy Nomad client's certificate from cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.client_private_key }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.client_private_key_local }}"
#       name: Copy Nomad client's private key from cache
  name: Client certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CLI certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.cli_certificate }}"
        private_key: "{{ certificate_files.cli_private_key }}"
    when: inventory_hostname == first_manager

#     - ansible.builtin.command:
#         cmd: >
#           nomad tls cert create
#             {{ '-additional-ipaddress ' ~ (manager_ips | join(' -additional-ipaddress ')) }}
#             -cli
#             -domain {{ certificate.domain_name }}
#       args:
#         chdir: /etc/nomad.d/certs
#       delegate_to: "{{ first_manager }}"
#       name: Generate Nomad CLI private key and certificate
#       when: >
#         not cli_certificate.stat.exists
#         or not cli_private_key.stat.exists
#         or not cli_certificate_data.valid_at.month
#         or ca_certificate_gen.changed

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.cli_certificate_local }}"
#         flat: true
#         src: "{{ certificate_files.cli_certificate }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad CLI's certificate to cache

#     - ansible.builtin.fetch:
#         dest: "{{ certificate_files.cli_private_key_local }}"
#         flat: true
#         src: "{{ certificate_files.cli_private_key }}"
#       delegate_to: "{{ first_manager }}"
#       name: Copy Nomad CLI's private key to cache

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.cli_certificate }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.cli_certificate_local }}"
#       name: Copy Nomad CLI's certificate from cache
#       when: "'manager' in group_names"

#     - ansible.builtin.copy:
#         dest: "{{ certificate_files.cli_private_key }}"
#         group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         mode: '0750'
#         owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
#         src: "{{ certificate_files.cli_private_key_local }}"
#       name: Copy Nomad CLI's private key from cache
#       when: "'manager' in group_names"
  name: CLI certificate
...
