acl = {
  default_policy = "deny"
  down_policy = "extend-cache"
  enable_key_list_policy = true
  enable_token_persistence = true
  enable_token_replication = true
  enabled = true
}

bind_addr = "{{ ansible_default_ipv4.address }}"

{% if 'manager' in group_names %}
bootstrap_expect = {{ groups['manager'] | length }}
client_addr = "0.0.0.0"
{% endif %}

datacenter = "{{ nomad_main_datacenter_name }}"
data_dir = "/opt/consul"
disable_anonymous_signature = true
disable_remote_exec = true //@TODO ???
disable_update_check = true
discard_check_output = true //@TODO ???
discovery_max_stale = "87600h" //@TODO ???

dns_config = {
  cache_max_age = "5s"
  enable_truncate = true
  node_ttl = "5m"
  only_passing = true
  service_ttl = {
    "*" = "5s"
  }
  use_cache = true
}

enable_agent_tls_for_checks = false //@TODO ???
enable_local_script_checks = true
encrypt = "{{ hostvars[groups['manager'][0]]['consul_encryption_string'] }}"
node_name = "{{ inventory_hostname_short }}"

node_meta = {
  node_class = "{{ group_names[0] | replace('_','-') }}"
}

performance = {
  enable_xds_load_balancing = true //@TODO ???
  raft_multiplier = 1
}

ports = {
  http = -1
  https = 8501
}

primary_datacenter = "{{ nomad_main_datacenter_name }}"

{% if 'manager' in group_names %}
raft_logstore = {
  backend = "wal"
  verification = {
    enabled = true
    interval = "5m"
  }
}
{% endif %}

rejoin_after_leave = true

retry_join = [
  {% for host in groups['manager'] %}
  "{{ host }}"{% if not loop.last %},{% endif %}

  {% endfor %}
]

{% if 'manager' in group_names %}
server = true
{% endif %}

// @TODO: for the future
// telemetry = {
// }

tls = {
  defaults = {
    ca_file = "{{ certificate_files.ca_certificate }}"
    cert_file = "{{ certificate_files.server_certificate if 'manager' in group_names else certificate_files.client_certificate }}"
    key_file = "{{ certificate_files.server_private_key if 'manager' in group_names else certificate_files.client_private_key }}"
    verify_incoming = true
    verify_outgoing = true
    verify_server_hostname = true
  }
  https = {
    verify_incoming = false
  }
}

translate_wan_addrs = true //@TODO ???

{% if 'manager' in group_names %}
ui_config {
  enabled = true
  //@TODO ???
  // dashboard_url_templates = {}
  // metrics_provider = "prometheus"
  // metrics_proxy = {
  //   base_url = "http://prometheus-server"
  //   path_allowlist = [
  //     "/api/v1/query_range",
  //     "/api/v1/query"
  //   ]
  //   add_headers = []
  // }
}
{% endif %}
