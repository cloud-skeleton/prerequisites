---
- ansible.builtin.set_fact:
    certificate_request:
      common_name: "{{ certificate.common_name | default('Cloud Skeleton CA', true) }}"
      # country: "{{ certificate.country | default('EU', true) }}"
      days: "{{ certificate.days | default(365, true) }}"
      days_ca: "{{ certificate.days_ca | default(3650, true) }}"
      domain_name: "{{ certificate.domain_name | default(first_manager.split('.')[1:] | join('.'), true) }}"
      # locality: "{{ certificate.locality | default('Brussels', true) }}"
      # organization: "{{ certificate.organization | default('Cloud Skeleton', true) }}"
      # organizational_unit: "{{ certificate.organizational_unit | default('consul Cluster', true) }}"
      # postal_code: "{{ certificate.postal_code | default(1049, true) }}"
      # province: "{{ certificate.province | default('Brussels', true) }}"
      # street_address: "{{ certificate.street_address | default('Rue de la Loi 200', true) }}"
  name: Set certificate request information

- ansible.builtin.set_fact:
    certificate_files:
      ca_certificate: "/etc/consul.d/certs/consul-agent-ca.pem"
      ca_certificate_local: "{{ playbook_dir }}/../.cache/consul-agent-ca.pem"
      ca_private_key: "/etc/consul.d/certs/consul-agent-ca-key.pem"
      ca_private_key_local: "{{ playbook_dir }}/../.cache/consul-agent-ca-key.pem"
      cli_certificate: "/etc/consul.d/certs/home-cli-consul-0.pem"
      cli_certificate_local: "{{ playbook_dir }}/../.cache/home-cli-consul-0.pem"
      cli_private_key: "/etc/consul.d/certs/home-cli-consul-0-key.pem"
      cli_private_key_local: "{{ playbook_dir }}/../.cache/home-cli-consul-0-key.pem"
      client_certificate: "/etc/consul.d/certs/home-client-consul-0.pem"
      client_certificate_local: "{{ playbook_dir }}/../.cache/home-client-consul-0.pem"
      client_private_key: "/etc/consul.d/certs/home-client-consul-0-key.pem"
      client_private_key_local: "{{ playbook_dir }}/../.cache/home-client-consul-0-key.pem"
      server_certificate: "/etc/consul.d/certs/home-server-consul-0.pem"
      server_certificate_local: "{{ playbook_dir }}/../.cache/home-server-consul-0.pem"
      server_private_key: "/etc/consul.d/certs/home-server-consul-0-key.pem"
      server_private_key_local: "{{ playbook_dir }}/../.cache/home-server-consul-0-key.pem"
  name: Set certificate file paths

- ansible.builtin.file:
    group: consul
    mode: '0750'
    owner: consul
    path: /etc/consul.d/certs
    state: directory
  name: Setup Consul certificates folder permissions

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CA certificates
    vars:
      force_remove: false
      paths:
        certificate: "{{ certificate_files.ca_certificate }}"
        private_key: "{{ certificate_files.ca_private_key }}"

  - ansible.builtin.command:
      cmd: >
        consul tls ca create
          -common-name "{{ certificate_request.common_name }}"
          -days {{ certificate_request.days_ca }}
    args:
      chdir: /etc/consul.d/certs
    name: Generate Consul CA's private key and certificate
    register: ca_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize CA certificates
    vars:
      certificate:
        destinations: true
        path: "{{ certificate_files.ca_certificate }}"
        path_local: "{{ certificate_files.ca_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.ca_private_key }}"
        path_local: "{{ certificate_files.ca_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].ca_certificate_creation.changed
  name: CA certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up server certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.server_certificate }}"
        private_key: "{{ certificate_files.server_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        consul tls cert create
          -additional-dnsname="*.{{ certificate_request.domain_name }}"
          -days {{ certificate_request.days }}
          -dc {{ nomad_main_datacenter_name }}
          -server
    args:
      chdir: /etc/consul.d/certs
    name: Generate consul server private key and certificate
    register: server_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize server certificates
    vars:
      certificate:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.server_certificate }}"
        path_local: "{{ certificate_files.server_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.server_private_key }}"
        path_local: "{{ certificate_files.server_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].server_certificate_creation.changed
  name: Server certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up client certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.client_certificate }}"
        private_key: "{{ certificate_files.client_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        consul tls cert create
          -additional-dnsname="*.{{ certificate_request.domain_name }}"
          -client
          -days {{ certificate_request.days }}
          -dc {{ nomad_main_datacenter_name }}
    args:
      chdir: /etc/consul.d/certs
    name: Generate consul client private key and certificate
    register: client_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize client certificates
    vars:
      certificate:
        destinations: true
        path: "{{ certificate_files.client_certificate }}"
        path_local: "{{ certificate_files.client_certificate_local }}"
      private_key:
        destinations: true
        path: "{{ certificate_files.client_private_key }}"
        path_local: "{{ certificate_files.client_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].client_certificate_creation.changed
  name: Client certificate

- block:
  - include_tasks: clear_certificates.yml
    name: Clean up CLI certificates
    vars:
      force_remove: "{{ hostvars[first_manager].ca_certificate_creation.changed }}"
      paths:
        certificate: "{{ certificate_files.cli_certificate }}"
        private_key: "{{ certificate_files.cli_private_key }}"
    when: inventory_hostname == first_manager

  - ansible.builtin.command:
      cmd: >
        consul tls cert create
          -additional-dnsname="*.{{ certificate_request.domain_name }}"
          -cli
          -days {{ certificate_request.days }}
          -dc {{ nomad_main_datacenter_name }}
    args:
      chdir: /etc/consul.d/certs
    name: Generate consul CLI private key and certificate
    register: cli_certificate_creation
    when:
      - inventory_hostname == first_manager
      - certificate_removed

  - include_tasks: sync_certificates.yml
    name: Synchronize CLI certificates
    vars:
      certificate:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.cli_certificate }}"
        path_local: "{{ certificate_files.cli_certificate_local }}"
      private_key:
        destinations: "{{ 'manager' in group_names }}"
        path: "{{ certificate_files.cli_private_key }}"
        path_local: "{{ certificate_files.cli_private_key_local }}"
      source: "{{ inventory_hostname == first_manager }}"
    when: hostvars[first_manager].cli_certificate_creation.changed
  name: CLI certificate

- ansible.builtin.set_fact:
    certificates_updated: >
      {{
        hostvars[first_manager].ca_certificate_creation.changed
        or hostvars[first_manager].server_certificate_creation.changed
        or hostvars[first_manager].client_certificate_creation.changed
        or hostvars[first_manager].cli_certificate_creation.changed
      }}
  name: Set certificates update fact
...
