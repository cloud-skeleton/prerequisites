---
- ansible.builtin.file:
    group: consul
    mode: '0750'
    owner: consul
    path: /etc/consul.d/policies
    state: directory
  name: Setup Consul policies folder permissions
  when: "'manager' in group_names"

- ansible.builtin.copy:
    content: |
      agent_prefix  "" {
        policy = "read"
      }
    dest: /etc/consul.d/policies/allow-agent-read.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-agent-read" policy HCL
  register: allow_agent_read_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow agent read access"
      -name allow-agent-read
      -rules @/etc/consul.d/policies/allow-agent-read.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-agent-read" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_agent_read_policy.changed

- ansible.builtin.copy:
    content: |
      node_prefix  "" {
        policy = "write"
      }
    dest: /etc/consul.d/policies/allow-node-write.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-node-write" policy HCL
  register: allow_node_write_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow node write access"
      -name allow-node-write
      -rules @/etc/consul.d/policies/allow-node-write.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-node-write" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_node_write_policy.changed

- ansible.builtin.copy:
    content: |
      service_prefix "" {
        policy = "write"
      }
    dest: /etc/consul.d/policies/allow-service-write.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-service-write" policy HCL
  register: allow_service_write_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow service write access"
      -name allow-service-write
      -rules @/etc/consul.d/policies/allow-service-write.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-service-write" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_service_write_policy.changed

- ansible.builtin.copy:
    content: |
      acl  = "write"
    dest: /etc/consul.d/policies/allow-acl-write.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-acl-write" policy HCL
  register: allow_acl_write_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow ACL write access"
      -name allow-acl-write
      -rules @/etc/consul.d/policies/allow-acl-write.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-acl-write" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_acl_write_policy.changed

- ansible.builtin.copy:
    content: |
      mesh = "write"
    dest: /etc/consul.d/policies/allow-mesh-write.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-mesh-write" policy HCL
  register: allow_mesh_write_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow mesh write access"
      -name allow-mesh-write
      -rules @/etc/consul.d/policies/allow-mesh-write.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-mesh-write" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_mesh_write_policy.changed

- community.general.consul_token:
    ca_path: "{{ certificate_files.ca_certificate }}"
    description: Nomad server agent token
    local: false
    node_identities: []
    policies:
      - name: allow-agent-read
      - name: allow-node-write
      - name: allow-service-write
      - name: allow-acl-write
      - name: allow-mesh-write
    port: 8501
    roles: []
    scheme: https
    service_identities: []
    token: "{{ consul_bootstrap_token }}"
  name: Create scoped Nomad server agent token
  register: nomad_server_agent_token
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      allow_agent_read_policy.changed
      or allow_node_write_policy.changed
      or allow_service_write_policy.changed
      or allow_acl_write_policy.changed
      or allow_mesh_write_policy.changed

- ansible.builtin.set_fact:
    cacheable: true
    consul_nomad_server_agent_token: "{{ nomad_server_agent_token.token.SecretID }}"
  name: Cache the new Nomad server agent token indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - nomad_server_agent_token.changed

- community.general.consul_token:
    ca_path: "{{ certificate_files.ca_certificate }}"
    description: Nomad client agent token
    local: false
    node_identities: []
    policies:
      - name: allow-agent-read
      - name: allow-node-write
      - name: allow-service-write
    port: 8501
    roles: []
    scheme: https
    service_identities: []
    token: "{{ consul_bootstrap_token }}"
  name: Create scoped Nomad client agent token
  register: nomad_client_agent_token
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      allow_agent_read_policy.changed
      or allow_node_write_policy.changed
      or allow_service_write_policy.changed

- ansible.builtin.set_fact:
    cacheable: true
    consul_nomad_client_agent_token: "{{ nomad_client_agent_token.token.SecretID }}"
  name: Cache the new Nomad client agent token indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - nomad_client_agent_token.changed

- ansible.builtin.template:
    dest: /etc/nomad.d/nomad-consul.hcl
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    lstrip_blocks: true
    mode: '0640'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    src: nomad-consul.hcl.j2
    trim_blocks: true
  name: Configure Nomad Consul
  register: nomad_config_consul

- ansible.builtin.blockinfile:
    block: |
      {% if 'manager' in group_names %}
      CONSUL_HTTP_TOKEN={{ hostvars[groups['manager'][0]].consul_nomad_server_agent_token }}
      {% else %}
      CONSUL_HTTP_TOKEN={{ hostvars[groups['manager'][0]].consul_nomad_client_agent_token }}
      {% endif %}
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    marker: "# {mark} CONSUL"
    mode: '0640'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    path: /etc/nomad.d/nomad.env
  name: Set Nomad environment variables for Consul
  register: nomad_env_file

- ansible.builtin.user:
    append: true
    groups: consul
    name: nomad
  name: Add nomad user to consul group
  register: nomad_user_group

- ansible.builtin.systemd_service:
    daemon_reload: true
    name: nomad
    state: restarted
  name: Restart Nomad if configuration has been changed
  when: >
    nomad_env_file.changed
    or nomad_config_consul.changed
    or nomad_user_group.changed

- ansible.builtin.slurp:
    src: /etc/nomad.d/certs/nomad-agent-ca.pem
  name: Read remote nomad-agent-ca.pem into a variable
  register: nomad_agent_ca_file
  when: inventory_hostname == groups['manager'][0]

- community.general.consul_auth_method:
    ca_path: "{{ certificate_files.ca_certificate }}"
    config:
      bound_audiences: ["cloudskeleton.eu"]
      claim_mappings:
        consul_namespace: consul_namespace
        nomad_job_id: nomad_job_id
        nomad_namespace: nomad_namespace
        nomad_service: nomad_service
        nomad_task: nomad_task
      jwks_ca_cert: "{{ nomad_agent_ca_file.content | b64decode }}"
      jwks_url: "https://127.0.0.1:4646/.well-known/jwks.json"
    description: JWT auth method for Nomad services and tasks
    name: nomad-workloads
    port: 8501
    scheme: https
    token: "{{ consul_bootstrap_token }}"
    token_locality: global
    type: jwt
  name: Create Consul JWT auth method for Nomad workloads
  when: inventory_hostname == groups['manager'][0]

- community.general.consul_binding_rule:
    auth_method: nomad-workloads
    bind_name: '${value.nomad_service}'
    bind_type: service
    ca_path: "{{ certificate_files.ca_certificate }}"
    description: Binding rule for services registered from Nomad
    name: nomad-services
    port: 8501
    scheme: https
    selector: '"nomad_service" in value'
    token: "{{ consul_bootstrap_token }}"
  name: Create binding rule for services registered from Nomad
  when: inventory_hostname == groups['manager'][0]

- community.general.consul_binding_rule:
    auth_method: nomad-workloads
    bind_name: nomad-tasks
    bind_type: role
    ca_path: "{{ certificate_files.ca_certificate }}"
    description: Binding rule for Nomad tasks
    name: nomad-tasks
    port: 8501
    scheme: https
    selector: '"nomad_service" not in value'
    token: "{{ consul_bootstrap_token }}"
  name: Create binding rule for Nomad tasks
  when: inventory_hostname == groups['manager'][0]

- ansible.builtin.copy:
    content: |
      node_prefix  "" {
        policy = "read"
      }
    dest: /etc/consul.d/policies/allow-node-read.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-node-read" policy HCL
  register: allow_node_read_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow node read access"
      -name allow-node-read
      -rules @/etc/consul.d/policies/allow-node-read.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-node-read" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_node_read_policy.changed

- ansible.builtin.copy:
    content: |
      service_prefix "" {
        policy = "read"
      }
    dest: /etc/consul.d/policies/allow-service-read.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-service-read" policy HCL
  register: allow_service_read_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow service read access"
      -name allow-service-read
      -rules @/etc/consul.d/policies/allow-service-read.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-service-read" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_service_read_policy.changed

- ansible.builtin.copy:
    content: |
      key_prefix "" {
        policy = "read"
      }
    dest: /etc/consul.d/policies/allow-key-read.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-key-read" policy HCL
  register: allow_key_read_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow key read access"
      -name allow-key-read
      -rules @/etc/consul.d/policies/allow-key-read.hcl
  environment:
    CONSUL_CACERT: "{{ certificate_files.ca_certificate }}"
    CONSUL_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
    CONSUL_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
    CONSUL_HTTP_ADDR: https://localhost:8501
    CONSUL_HTTP_SSL: "true"
  name: Create the "allow-key-read" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_key_read_policy.changed

- community.general.consul_role:
    ca_path: "{{ certificate_files.ca_certificate }}"
    description: ACL role for Nomad tasks
    name: nomad-tasks
    node_identities: []
    policies:
      - name: allow-key-read
      - name: allow-node-read
      - name: allow-service-read
    port: 8501
    scheme: https
    service_identities: []
    token: "{{ consul_bootstrap_token }}"
  name: Create Nomad tasks role
  register: nomad_tasks_role
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      allow_key_read_policy.changed
      or allow_node_read_policy.changed
      or allow_service_read_policy.changed
...
