---
- ansible.builtin.set_fact:
    all_manager_ips: >-
      {{
        groups['manager']
        | map('extract', hostvars, 'ansible_default_ipv4')
        | map(attribute='address') | flatten
      }}
  name: Set all managers IP list
  register: all_manager_ips_fact

- ansible.builtin.set_fact:
    all_worker_ips: >-
      {{
        (groups['main_worker'] + groups['ingress_worker'])
        | map('extract', hostvars, 'ansible_default_ipv4')
        | map(attribute='address') | flatten
      }}
  name: Set all workers IP list
  register: all_worker_ips_fact

- ansible.builtin.set_fact:
    worker_ips: >-
      {{
        ansible_play_hosts
        | reject('in', groups['manager'])
        | map('extract', hostvars, 'ansible_default_ipv4')
        | map(attribute='address')
        | reject('equalto', ansible_default_ipv4.address)
        | list
      }}
  name: Collect other worker IPs

- community.general.ufw:
    from_ip: "{{ ip }}"
    log: true
    proto: "{{ proto }}"
    rule: allow
    to_port: "{{ port_no }}"
  loop: "{{ query('nested', worker_ips, consul_client_to_client_ports | map('split', '/') | list) }}"
  loop_control:
    loop_var: rule
  name: Allow Consul client to client ports
  vars:
    ip: "{{ rule[0] }}"
    port_no: "{{ rule[1] }}"
    proto: "{{ rule[2] }}"
  when: "'manager' not in group_names"

- community.general.ufw:
    from_ip: "{{ ip }}"
    log: true
    proto: "{{ proto }}"
    rule: allow
    to_port: "{{ port_no }}"
  loop: "{{ query('nested', worker_ips, consul_client_to_server_ports | map('split', '/') | list) }}"
  loop_control:
    loop_var: rule
  name: Allow Consul client to server ports
  vars:
    ip: "{{ rule[0] }}"
    port_no: "{{ rule[1] }}"
    proto: "{{ rule[2] }}"
  when: "'manager' in group_names"

- ansible.builtin.set_fact:
    manager_ips: >-
      {{
        groups['manager']
        | map('extract', hostvars, 'ansible_default_ipv4')
        | map(attribute='address')
        | reject('equalto', ansible_default_ipv4.address)
        | list
      }}
  name: Collect other manager IPs

- community.general.ufw:
    from_ip: "{{ ip }}"
    log: true
    proto: "{{ proto }}"
    rule: allow
    to_port: "{{ port_no }}"
  loop: "{{ query('nested', manager_ips, consul_server_to_server_ports | map('split', '/') | list) }}"
  loop_control:
    loop_var: rule
  name: Allow Consul server to server ports
  vars:
    ip: "{{ rule[0] }}"
    port_no: "{{ rule[1] }}"
    proto: "{{ rule[2] }}"
  when: "'manager' in group_names"

- community.general.ufw:
    from_ip: "{{ ip }}"
    log: true
    proto: "{{ proto }}"
    rule: allow
    to_port: "{{ port_no }}"
  loop: "{{ query('nested', nomad_server_http_allow_ip_cidrs, consul_server_admin_ports | map('split', '/') | list) }}"
  loop_control:
    loop_var: rule
  name: Allow admin access to Consul server HTTP endpoints
  vars:
    ip: "{{ rule[0] }}"
    port_no: "{{ rule[1] }}"
    proto: "{{ rule[2] }}"
  when: "'manager' in group_names"

- ansible.builtin.apt:
    autoclean: true
    autoremove: true
    clean: true
    install_recommends: true
    name: consul
    state: latest
    update_cache: true
  name: Install Consul dependencies packages

- ansible.builtin.slurp:
    src: /home/ansible/.bashrc
  name: Read remote .bashrc into a variable
  register: bashrc_file

- ansible.builtin.set_fact:
    consul_completion_present: >
      {{ 
        ('complete -C /usr/bin/consul consul')
        in (bashrc_file.content | b64decode)
      }}
  name: Check for existing Consul autocomplete line in .bashrc

- ansible.builtin.command:
    cmd: consul -autocomplete-install
  become: false
  changed_when: false
  name: Add Consul autocomplete configuration
  when: not consul_completion_present

- ansible.builtin.command:
    cmd: consul keygen
  name: Generate 32 byte random string for encryption
  register: encryption_string
  when:
    - inventory_hostname == groups['manager'][0]
    - consul_encryption_string is not defined

- ansible.builtin.set_fact:
    cacheable: true
    consul_encryption_string: "{{ encryption_string.stdout }}"
  name: Cache the new 32 byte encryption string indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - encryption_string.changed

# - import_tasks: certificates.yml

- ansible.builtin.template:
    dest: /etc/consul.d/consul.hcl
    group: consul
    lstrip_blocks: true
    mode: '0640'
    owner: consul
    src: consul.hcl.j2
    trim_blocks: true
  name: Configure Consul
  register: consul_config

- ansible.builtin.command:
    cmd: consul validate /etc/consul.d
  name: Validate Consul configuration
  when: consul_config.changed

- ansible.builtin.systemd_service:
    daemon_reload: true
    enabled: true
    name: consul
    state: started
  name: Start first Consul manager
  when: inventory_hostname == groups['manager'][0]

- ansible.builtin.systemd_service:
    daemon_reload: true
    name: consul
    state: restarted
  name: Restart Consul if configuration or service has been changed
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      consul_config.changed
    # or certificates_updated

- community.general.consul_acl_bootstrap:
    # ca_path: "{{ certificate_files.ca_certificate }}"
    # scheme: https
  name: Create Consul ACL boostrap token
  register: bootstrap_token
  when:
    - inventory_hostname == groups['manager'][0]
    - consul_bootstrap_token is not defined

- ansible.builtin.set_fact:
    cacheable: true
    consul_bootstrap_token: "{{ bootstrap_token.result.SecretID }}"
  name: Cache the new bootstrap token indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - bootstrap_token.changed

- community.general.consul_token:
    # ca_path: "{{ certificate_files.ca_certificate }}"
    description: "{{ item }} agent token"
    local: false
    node_identities:
      - datacenter: "{{ nomad_main_datacenter_name }}"
        node_name: "{{ hostvars[item].inventory_hostname_short }}"
    policies: []
    roles: []
    # scheme: https
    service_identities: []
    token: "{{ consul_bootstrap_token }}"
  loop: "{{ groups['all'] }}"
  name: Create scoped "agent" tokens for all nodes
  register: agent_tokens
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      consul_agent_tokens is not defined
      or item not in consul_agent_tokens

- ansible.builtin.set_fact:
    cacheable: true
    consul_agent_tokens: >
      {{
        consul_agent_tokens | default({}, true) | combine(
          dict(
            agent_tokens.results | rejectattr('skipped', 'defined') | map(attribute='item')
              | zip(agent_tokens.results | rejectattr('skipped', 'defined') | map(attribute='token.SecretID'))
          )
        )
      }}
  name: Cache all agent tokens indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - agent_tokens.changed

- ansible.builtin.file:
    group: consul
    mode: '0750'
    owner: consul
    path: /etc/consul.d/policies
    state: directory
  name: Setup Consul policies folder permissions
  when: "'manager' in group_names"

- ansible.builtin.copy:
    content: |
      agent_prefix  "" {
        policy = "read"
      }
    dest: /etc/consul.d/policies/allow-agent-read.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-agent-read" policy HCL
  register: allow_agent_read_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow agent read access"
      -name allow-agent-read
      -rules @/etc/consul.d/policies/allow-agent-read.hcl
  # environment:
  #   NOMAD_ADDR: https://localhost:4646
  #   NOMAD_CACERT: "{{ certificate_files.ca_certificate }}"
  #   NOMAD_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
  #   NOMAD_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
  name: Create the "allow-agent-read" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_agent_read_policy.changed

- ansible.builtin.copy:
    content: |
      service_prefix "" {
        policy = "write"
      }
    dest: /etc/consul.d/policies/allow-service-write.hcl
    group: consul
    mode: '0750'
    owner: consul
  name: Write out the "allow-service-write" policy HCL
  register: allow_service_write_policy
  when: "'manager' in group_names"

- ansible.builtin.command:
    cmd: >
      consul acl policy create -token {{ consul_bootstrap_token }}
      -description "Allow service write access"
      -name allow-service-write
      -rules @/etc/consul.d/policies/allow-service-write.hcl
  # environment:
  #   NOMAD_ADDR: https://localhost:4646
  #   NOMAD_CACERT: "{{ certificate_files.ca_certificate }}"
  #   NOMAD_CLIENT_CERT: "{{ certificate_files.cli_certificate }}"
  #   NOMAD_CLIENT_KEY: "{{ certificate_files.cli_private_key }}"
  name: Create the "allow-service-write" ACL policy
  when:
    - inventory_hostname == groups['manager'][0]
    - allow_service_write_policy.changed

# - ansible.builtin.copy:
#     content: |
#       node_prefix "" {
#         policy = "write"
#       }
#     dest: /etc/consul.d/policies/allow-node-write.hcl
#     group: consul
#     mode: '0750'
#     owner: consul
#   name: Write out the "allow-node-write" policy HCL
#   register: allow_node_write_policy
#   when: "'manager' in group_names"

# - ansible.builtin.copy:
#     content: |
#       session_prefix "" {
#         policy = "write"
#       }
#     dest: /etc/consul.d/policies/allow-session-write.hcl
#     group: consul
#     mode: '0750'
#     owner: consul
#   name: Write out the "allow-session-write" policy HCL
#   register: allow_session_write_policy
#   when: "'manager' in group_names"

# - ansible.builtin.copy:
#     content: |
#       key_prefix "" {
#         policy = "write"
#       }
#     dest: /etc/consul.d/policies/allow-key-write.hcl
#     group: consul
#     mode: '0750'
#     owner: consul
#   name: Write out the "allow-key-write" policy HCL
#   register: allow_key_write_policy
#   when: "'manager' in group_names"


- community.general.consul_token:
    # ca_path: "{{ certificate_files.ca_certificate }}"
    description: Nomad agent token
    local: false
    node_identities: []
    policies:
      - name: allow-agent-read
      - name: allow-service-write
    roles: []
    # scheme: https
    service_identities: []
    token: "{{ consul_bootstrap_token }}"
  name: Create scoped Nomad "agent" token
  register: nomad_agent_token
  when:
    - inventory_hostname == groups['manager'][0]
    - >
      allow_agent_read_policy.changed
      or allow_service_write_policy.changed

- ansible.builtin.set_fact:
    cacheable: true
    consul_nomad_agent_token: "{{ nomad_agent_token.token.SecretID }}"
  name: Cache the new Nomad agent token indefinitely
  when:
    - inventory_hostname == groups['manager'][0]
    - nomad_agent_token.changed

- ansible.builtin.blockinfile:
    block: |
      CONSUL_HTTP_TOKEN={{ hostvars[groups['manager'][0]].consul_nomad_agent_token }}
    group: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    marker: "# {mark} CONSUL"
    mode: '0640'
    owner: "{{ 'nomad' if 'manager' in group_names else 'root' }}"
    path: /etc/nomad.d/nomad.env
  name: Set Nomad environment variables for Consul
  register: nomad_env_file

- ansible.builtin.systemd_service:
    daemon_reload: true
    name: nomad
    state: restarted
  name: Restart Nomad if configuration has been changed
  when: nomad_env_file.changed

- ansible.builtin.blockinfile:
    block: |
      CONSUL_HTTP_TOKEN={{ hostvars[groups['manager'][0]].consul_agent_tokens[inventory_hostname] }}
    group: consul
    marker: "# {mark} CONSUL"
    mode: '0640'
    owner: consul
    path: /etc/consul.d/consul.env
  name: Set Consul environment variables for agent
  register: agent_consul_env_file

- ansible.builtin.systemd_service:
    daemon_reload: true
    enabled: true
    name: consul
    state: started
  name: Start all Consul nodes

- ansible.builtin.systemd_service:
    daemon_reload: true
    name: consul
    state: restarted
  name: Restart Consul if configuration or service has been changed
  when: >
    consul_config.changed
    or agent_consul_env_file.changed
  #  or certificates_updated
...
